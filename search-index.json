[{"content":"1. 背景 直接打開從MSSQL備份下來的*.sqlaudit檔案，會因為該檔案經過MSSQL編碼過，而出現無法直接識別的亂碼文件。\n2. 前置條件 若要查看*.sqlaudit的內容，需要符合下列條件:\n查詢MSSQL的編輯器 可以參考官方提供的工具1，例如: SQL Server Management Studio、Azure Data Studio，或是透過vscode安裝mssql extension2。\nMicrosoft SQL Server 除了手邊既有的mssql，推薦可以透過docker建立一座臨時的mssql container。\n3. 解決方式 3.1 低成本取得MSSQL 透過docker container的技術，我們可以減少取得測試用資料庫所需的成本。\n首先將下面yaml格式的內容存成docker-compose.yml:\n# Version: \u0026#34;3.9\u0026#34; services: db: image: mcr.microsoft.com/mssql/server:2019-latest platform: linux/amd64 ports: - \u0026#34;1433:1433\u0026#34; volumes: - .:/auditfiles environment: ACCEPT_EULA: \u0026#34;Y\u0026#34; SA_PASSWORD: \u0026#34;Passw0rd\u0026#34;\rversion: 內容會將他註解掉是因為，docker最新的官方文件已經將version這個element標示為obsolete3，考量到有些沒有更新的docker compose的使用者而以註解的形式保留。 platform: 這個設定並非必要，主要是我在執行時所使用的設備是arm cpu，所以需要指定platform4。 environment: 在Linux上可以設定的mssql環境變數可以參考官網文件5。 volumes: 會掛載當前路徑到container內，所以*.sqlaudit檔案也需要放在當前目錄下。 接下來只需要透過docker compose的指令就可以取得測試用資料庫:\ndocker compose up -d\r3.2 透過VS Code連線到MSSQL 目前還是習慣在vs code執行各項作業，所以工具選型才會是透過vs code + extension的方式進行。如果手邊有SSMS或其他工具可以連線到MSSQL，那就可以忽略這個小節。\n安裝僅需要打開vscode找到MSSQL的extension2，按下install即可:\n接下來可以嘗試連線到步驟3.1 低成本取得MSSQL所建立的資料庫:\n除了hostname是連線到localhost以外，剩下的設定都是依照步驟3.1 低成本取得MSSQL，啟動資料庫時傳入的參數而定。\n登入成功就可以得到如下圖紅匡標示的結果:\n3.3 直接在VS Code上讀取sqlaudit檔 這邊要注意sqlaudit的檔案位置是我們透過docker volume的方式，將*.sqlaudit檔案所在路徑mount到mssql的container內。\nDECLARE @filePath NVARCHAR(260) = N\u0026#39;/auditfiles/xxx.sqlaudit\u0026#39;; SELECT * FROM sys.fn_get_audit_file(@filePath, DEFAULT, DEFAULT);\r完成後查詢結果大約會像下圖所示:\n4. 總結 撰寫這篇文章時，內心其實有點猶豫。雖然有ChatGPT可以輔助，但要將這次內容的知識點逐一點到說明真的很困難!這次使用的解決方法有需多前置的知識需要了解，例如: Docker Compose是什麼?VS Code怎麼用\u0026hellip;等等。\n寫到後面發現這篇文章的定位十分尷尬。對於新手來說，很容易被多個不同技術繞到頭暈目眩;對於老手來說，這篇文章解決的議題又太過沒有深度。所以這篇就當作是練練手，後續再持續找時間優化它吧。\n最後有發現，其實也可以透Hex Editor6之類的工具去確認編碼，然後再轉成可讀取的編碼就好，但是內容格式有點難讀就是了。這篇文章暫時就不追那麼深，希望未來有機會再去往下探索，感謝各位看官收看，希望有機會收到更多的回饋，謝謝。\n連線到 SQL Server 資料庫引擎 - SQL Server | Microsoft Learn\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nVisual Studio Market Place SQL Server (mssql)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nVersion top-level element (obsolete)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nServices top-level elements-platforms\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n使用環境變數在 Linux 上設定 SQL Server 設定\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nVisual Studio Market Place Hex Editor\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-06-05","id":0,"permalink":"/blog/%E5%9C%A8vs-code%E4%B8%8A%E6%9F%A5%E8%A9%A2mssql%E7%9A%84sqlaudit%E6%AA%94%E6%A1%88/","summary":"本來以為很簡單，但事實上並不單純的讀取sqlaudit內容之旅。這個議題是工作上遇到需要讀取sqlaudit檔案，但是我並不熟悉MSSQL，所以藉由ChatGPT輔助，針對解答與自己的想法整理出來的筆記。","tags":["Job","Docker","MSSQL","VS Code","Audit File"],"title":"在VS Code上查詢MSSQL的sqlaudit檔案"},{"content":"\r這篇文章來自於2022年5月，我發佈在HashNode平台的一篇同名文章 。因為沒有經營Hashnode，所以乾脆直接拉回來放一起管理。\nref: RHEL8.5安裝Docker小筆記1\n1. 環境說明 實驗主機的環境是Windows 11，所以需要使用到VirtualBox這個虛擬化解決方案 ，來達成我的目的。手邊如果沒有RHEL作業系統映像檔，可以自行前往Redhat Developer2下載DVD iso檔來安裝。\nVirtualBox: 6.1.30 RHEL: 8.5 2. 安裝Docker 2.1 設置Yum Repository 原先我是採用yum.repo去指向掛載的dvd.iso，用這個方式來安裝Yum Repository管理套件。但是發現DVD抓不到yum-utils這個套件，並且出現下面錯誤。\nsudo yum install -y yum-utils #Updating Subscription Management repositories. #DVD for RHEL8 BaseOs 0.0 B/s | 0 B 00:00 #Errors during downloading metadata for repository \u0026#39;DVD-BaseOS\u0026#39;: # - Curl error (37): Couldn\u0026#39;t read a file:// file for file:///mnt/dvd/BaseOS/repodata/repomd.xml [Couldn\u0026#39;t open file /mnt/dvd/BaseOS/repodata/repomd.xml] #Error: Failed to download metadata for repo \u0026#39;DVD-BaseOS\u0026#39;: Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried\r找了好久，真的很不熟RHEL的生態\u0026hellip;所以決定找時間再研究這個議題。為了解決上述這個問題的方式，可以透過下面3個步驟來解決:\n前提是機器的網路可以對外連線，若無法對外連線則需要透過其它方式。\n註冊RedHat Developer帳號 查詢的過程中，發現其實RedHat有提供No-cost RHEL for developers subscription3，所以我立馬去註冊一組帳號來試試。下圖是我菜味十足的訂閱資訊:\n啟用機器的RHEL訂閱 至於啟用機器訂閱的方式則可以透過Registration Assistant4這個服務，產生出對應的指令。本次我使用到下面這串指令完成了我的訂閱:\nsubscription-manager register --username \u0026lt;username\u0026gt; --password \u0026lt;password\u0026gt; subscription-manager list\r重新下載yum-utils 再次執行一開始的指令Complete!!!終於順利完成下載了!\nsudo yum install -y yum-utils sudo yum list --installed |grep -i yum-utils #yum-utils.noarch 4.0.21-4.el8_5 @rhel-8-for-x86_64-baseos-rpms\r解決註冊問題後，我們可以繼續配置安裝Docker套件所需要的設定:\nsudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/rhel/docker-ce.repo sudo yum repolist #Updating Subscription Management repositories. #repo id repo name #docker-ce-stable Docker CE Stable - x86_64 #rhel-8-for-x86_64-appstream-rpms Red Hat Enterprise #Linux 8 for x86_64 - AppStream (RPMs) #rhel-8-for-x86_64-baseos-rpms Red Hat Enterprise #Linux 8 for x86_64 - BaseOS (RPMs)\r這裡可以透過\u0026ndash;enable去開啟特殊版本(nightly、test)的套件，但這邊可以先不需要理會。\n2.2 安裝Docker套件 設置好repo可以開始進入主題，下載docker\u0026hellip;.等等，若是不指定版本基本上都會是下載latest版本的套件，不過個人習慣先確認好版本，所以會執行下列指令:\nyum list docker-ce --showduplicates | sort -r #Errors during downloading metadata for repository \u0026#39;docker-ce-stable\u0026#39;: # - Status code: 404 for https://download.docker.com/linux/rhel/8/x86_64/stable/repodata/repomd.xml (IP: 13.35.166.118) #Error: Failed to download metadata for repo \u0026#39;docker-ce-stable\u0026#39;: Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried #Updating Subscription Management repositories. #Docker CE Stable - x86_64 337 B/s | 381 B 00:01\r你沒看錯，又遇到問題了。檢查一下官網文件5後發現原來是自己眼拙，其實最開始的Note就有提到:\nWe currently only provide packages for RHEL on s390x (IBM Z). Other architectures are not yet supported for RHEL, but you may be able to install the CentOS packages on RHEL. Refer to the Install Docker Engine on CentOS page for details.\nfrom \u0026ldquo;Install Docker Engine on RHEL 2022.03.06\u0026rdquo;\n所以2.1 設置Yum Repository中，配置安裝Docker套件所需要的設定，只要從指向RHEL Repository改為從CentOS Repository拉取套件就可以:\nsudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo yum list docker-ce --showduplicates | sort -r #Updating Subscription Management repositories. #docker-ce.x86_64 3:20.10.9-3.el8 docker-ce-stable # ... ... ... #Docker CE Stable - x86_64 56 kB/s | 20 kB 00:00 #Available Packages\r確認好版本後，安裝Docker我們需要3個套件: docker-ce、docker-ce-cli、containerd.io，這次也是十分爭氣的遇到錯誤(很長一串所以我刪掉\u0026hellip;一些):\nsudo yum install -y docker-ce-3:20.10.9-3.el8 \\ docker-ce-cli-1:20.10.9-3.el8 \\ containerd.io #Updating Subscription Management repositories. #Last metadata expiration check: 0:41:05 ago on Sun 06 Mar 2022 09:19:20 PM CST. #Error: # Problem 1: problem with installed package podman-1:3.4.2-9.module+el8.5.0+13852+150547f7.x86_64 # Problem 2: problem with installed package podman-catatonit-1:3.4.2-9.module+el8.5.0+13852+150547f7.x86_64\r原來我又粗心了，以為新的作業系統就不會有套件衝突問題，原來RHEL8.5預設會安裝podman、runc，套件間會產生衝突。所以這次為了保守起見，我全部移除後再重新安裝，這次終於沒有怪怪的訊息了:\n# 移除套件 sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine \\ podman \\ runc\r再次安裝理論上會順利出現久違的Complete!!!\nsudo yum install -y docker-ce-3:20.10.9-3.el8 \\ docker-ce-cli-1:20.10.9-3.el8 \\ containerd.io\r2.3 啟動Docker Engine 這次十分順利的啟動Docker:\nsudo systemctl start docker sudo systemctl enable docker\r如果想再確認一下是否成功，可以檢查systemd是否正常運作:\nsystemctl status docker #● docker.service - Docker Application Container Engine # Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled) # Active: active (running) since Mon 2022-03-07 13:23:51 CST; 1min 25s ago # Docs: https://docs.docker.com # Main PID: 1183 (dockerd) # Tasks: 7 # Memory: 131.4M # CGroup: /system.slice/docker.service # └─1183 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\r3. 測試Docker基本功能 我們可以嘗試做一些docker指令來驗證docker服務是否正常。不過，本篇主要是紀錄如何安裝Docker，所以接下來並不會做過多的說明:\n3.1 檢查Docker版本 這裡顯示的Docker版本資訊，會根據安裝的版本不同而有所差異。\ndocker --version # Docker version 20.10.9, build c2ea9bc\r3.2 執行Docker容器 我們可以找個簡單的image來執行。特別提到Docker在本地沒有找到符合名字的image時，則會去Docker Hub抓對應的image下來。所以，如果RHEL8.5沒有對外網路連線，出現錯誤訊息是正常的歐~\ndocker run -p 80:80 -d nginx #Unable to find image \u0026#39;nginx:latest\u0026#39; locally #latest: Pulling from library/nginx #f7a1c6dad281: Pull complete #4d3e1d15534c: Pull complete #9ebb164bd1d8: Pull complete #59baa8b00c3c: Pull complete #a41ae70ab6b4: Pull complete #e3908122b958: Pull complete #Digest: #sha256:1c13bc6de5dfca749c377974146ac05256791ca2fe1979fc8e8278bf0121d285 #Status: Downloaded newer image for nginx:latest #b107a9214cbf0bfe53c2a97c56e28540858138d091efbc3ff9e4dcb8c3afc788\r3.3 確認Docker執行的服務 我們執行的Container是Nginx，如果把Port轉發到本地則可以訪問預設的Nginx服務。\ndocker ps #CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS #NAMES #b107a9214cbf nginx \u0026#34;/docker-entrypoint.…\u0026#34; 5 seconds ago Up 4 seconds 0.0.0.0:80-\u0026gt;80/tcp, :::80-\u0026gt;80/tcp priceless_curie curl http://localhost:80 #\u0026lt;!DOCTYPE html\u0026gt; #\u0026lt;html\u0026gt; #\u0026lt;head\u0026gt; #\u0026lt;title\u0026gt;Welcome to nginx!\u0026lt;/title\u0026gt; #\u0026lt;style\u0026gt; #html { color-scheme: light dark; } #body { width: 35em; margin: 0 auto; #font-family: Tahoma, Verdana, Arial, sans-serif; } #\u0026lt;/style\u0026gt; #\u0026lt;/head\u0026gt; #\u0026lt;body\u0026gt; #\u0026lt;h1\u0026gt;Welcome to nginx!\u0026lt;/h1\u0026gt; #\u0026lt;p\u0026gt;If you see this page, the nginx web server is successfully installed and #working. Further configuration is required.\u0026lt;/p\u0026gt; #\u0026lt;p\u0026gt;For online documentation and support please refer to #\u0026lt;a href=\u0026#34;http://nginx.org/\u0026#34;\u0026gt;nginx.org\u0026lt;/a\u0026gt;.\u0026lt;br/\u0026gt; #Commercial support is available at #\u0026lt;a href=\u0026#34;http://nginx.com/\u0026#34;\u0026gt;nginx.com\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt; #\u0026lt;p\u0026gt;\u0026lt;em\u0026gt;Thank you for using nginx.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt; #\u0026lt;/body\u0026gt; #\u0026lt;/html\u0026gt;\r4. 總結 RHEL8.5環境下，比起安裝Docker CE，Container操作更推薦直接使用Podman、Skopeo跟Buildah，因為DVD.iso已經有提供了(誤)。雖然兩者有些微的不同，不過大致上都是符合OCI(Open Container Initiative)6標準。整篇實作下來，Docker官網文件5寫得蠻清楚，步驟的安排也有考量到許多細節，值得所有會接觸到Docker的朋友看一看。\n幸好我比較粗心，所以這篇的篇幅才能拉這麼長😂除了碩士論文以外，第一次寫這麼長的文章，如果有任何建議，歡迎各位朋友不吝指教。當然有新手疑問也可以直接來詢問，我十分希望可以藉由這種互動的方式，優化、補強自己不足的地方。感謝各位看倌的收看~下次見🖐\n5. 參考資料 RHEL8.5安裝Docker小筆記\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nRedhat Developer\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nNo-cost RHEL for developers subscription\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nRegistration Assistant\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nInstall Docker Engine on RHEL\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nOCI(Open Container Initiative)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-11-18","id":1,"permalink":"/blog/rhel8.5%E5%AE%89%E8%A3%9Ddocker%E5%B0%8F%E7%AD%86%E8%A8%98/","summary":"嘗試在RHEL8上安裝Docker時發現沒有想像中來的順利😢，所以決定寫這篇來記錄這個過程。實際上本篇會遵照Docker官網 Install Docker Engine on RHEL循序安裝與說明，不過並非Step By Step的教學會夾雜一些故障排除，所以也可以直接去看官網會比較快。","tags":["Job","Docker","Linux"],"title":"RHEL8.5安裝Docker小筆記"},{"content":"","date":"2023-09-07","id":2,"permalink":"/blog/","summary":"","tags":[],"title":"Blog"},{"content":"","date":"2023-09-07","id":3,"permalink":"/docs/guides/","summary":"","tags":[],"title":"Guides"},{"content":"Guides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.\nFurther reading Read about how-to guides in the Diátaxis framework ","date":"2023-09-07","id":4,"permalink":"/docs/guides/example-guide/","summary":"Guides lead a user through a specific task they want to accomplish, often with a sequence of steps. Writing a good guide requires thinking about what your users are trying to do.","tags":[],"title":"Example Guide"},{"content":"","date":"2023-09-07","id":5,"permalink":"/docs/reference/","summary":"","tags":[],"title":"Reference"},{"content":"Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.\nFurther reading Read about reference in the Diátaxis framework ","date":"2023-09-07","id":6,"permalink":"/docs/reference/example-reference/","summary":"Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.","tags":[],"title":"Example Reference"},{"content":"","date":"2023-09-07","id":7,"permalink":"/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2024-06-05","id":8,"permalink":"/tags/audit-file/","summary":"","tags":[],"title":"Audit File"},{"content":"","date":"2024-06-05","id":9,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"2024-06-05","id":10,"permalink":"/tags/docker/","summary":"","tags":[],"title":"Docker"},{"content":"","date":"2024-06-05","id":11,"permalink":"/tags/job/","summary":"","tags":[],"title":"Job"},{"content":"","date":"2024-06-05","id":12,"permalink":"/tags/mssql/","summary":"","tags":[],"title":"MSSQL"},{"content":"","date":"2024-06-05","id":13,"permalink":"/categories/note/","summary":"","tags":[],"title":"Note"},{"content":"","date":"2024-06-05","id":14,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"},{"content":"","date":"2024-06-05","id":15,"permalink":"/tags/vs-code/","summary":"","tags":[],"title":"VS Code"},{"content":"","date":"2023-11-18","id":16,"permalink":"/tags/linux/","summary":"","tags":[],"title":"Linux"},{"content":"","date":"2023-09-07","id":17,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"2023-09-07","id":18,"permalink":"/","summary":"","tags":[],"title":"芥末轟炸雞の手帳"},{"content":"","date":"0001-01-01","id":19,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"}]